import { useState, useEffect } from "react";
import { useStatsPeriodSync } from "../hooks/useOrderAPI";
import { useRecettes } from "../hooks/useRecettes";
import { usePersonnelStats } from "../hooks/useAdvancedStats";
import { logger } from "../utils/logger";

/**
 * Exemple d'utilisation de l'utilitaire de synchronisation de p√©riodes
 * Ce hook permet de r√©soudre les incoh√©rences entre les recettes affich√©es
 * dans diff√©rentes sections de l'application
 */
export const useSynchronizedStats = (
  defaultPeriodType: "day" | "month" | "year" | "30days" = "30days"
) => {
  // √âtat pour stocker le type de p√©riode s√©lectionn√©
  const [periodType, setPeriodType] = useState(defaultPeriodType);

  // √âtat pour stocker les param√®tres de p√©riode g√©n√©r√©s
  const [periodParams, setPeriodParams] = useState<any>(null);

  // Utilitaire de synchronisation
  const { generatePeriodParams, analyzeDataConsistency } = useStatsPeriodSync();

  // G√©n√©rer les param√®tres de p√©riode au changement de type
  useEffect(() => {
    const params = generatePeriodParams(periodType);
    setPeriodParams(params);

    // Log pour d√©bogage
    logger.debug(
      `üìÖ [useSynchronizedStats] P√©riode ${periodType} s√©lectionn√©e:`,
      params
    );
  }, [periodType, generatePeriodParams]);

  // Charger les statistiques avec les p√©riodes synchronis√©es
  const { data: dayRecettes, loading: loadingDayRecettes } = useRecettes(
    periodParams?.recettes.mode === "single"
      ? periodParams?.recettes
      : { mode: "single", date: new Date().toISOString().split("T")[0] }
  );

  const { data: monthRecettes, loading: loadingMonthRecettes } = useRecettes(
    periodType === "month" && periodParams?.recettes.mode === "period"
      ? periodParams?.recettes
      : generatePeriodParams("month")?.recettes
  );

  const { data: yearRecettes, loading: loadingYearRecettes } = useRecettes(
    periodType === "year" && periodParams?.recettes.mode === "period"
      ? periodParams?.recettes
      : generatePeriodParams("year")?.recettes
  );

  const { data: personnelStats, loading: loadingPersonnelStats } =
    usePersonnelStats(
      periodParams?.personnel.dateDebut,
      periodParams?.personnel.dateFin
    );

  // Calculer les totaux pour chaque p√©riode
  const dayTotal = dayRecettes.reduce(
    (sum, day) => sum + (day.recettes || 0),
    0
  );
  const monthTotal = monthRecettes.reduce(
    (sum, day) => sum + (day.recettes || 0),
    0
  );
  const yearTotal = yearRecettes.reduce(
    (sum, day) => sum + (day.recettes || 0),
    0
  );

  // Analyser la coh√©rence des donn√©es une fois qu'elles sont toutes charg√©es
  useEffect(() => {
    if (
      !loadingDayRecettes &&
      !loadingMonthRecettes &&
      !loadingYearRecettes &&
      !loadingPersonnelStats
    ) {
      const analysis = analyzeDataConsistency(
        {
          day: { data: dayRecettes, total: dayTotal },
          month: { data: monthRecettes, total: monthTotal },
          year: { data: yearRecettes, total: yearTotal },
        },
        personnelStats?.data
      );

      // Vous pourriez utiliser l'analyse pour afficher des alertes √† l'utilisateur
      // ou pour ajuster automatiquement la p√©riode si n√©cessaire
      if (analysis.issues.length > 0) {
        logger.warn(
          `‚ö†Ô∏è [useSynchronizedStats] ${analysis.issues.length} probl√®me(s) d√©tect√©(s)`
        );
      }
    }
  }, [
    dayRecettes,
    monthRecettes,
    yearRecettes,
    personnelStats,
    loadingDayRecettes,
    loadingMonthRecettes,
    loadingYearRecettes,
    loadingPersonnelStats,
    dayTotal,
    monthTotal,
    yearTotal,
    analyzeDataConsistency,
  ]);

  return {
    // Param√®tres de p√©riode pour les composants enfants
    periodParams,
    // √âtat de chargement global
    loading:
      loadingDayRecettes ||
      loadingMonthRecettes ||
      loadingYearRecettes ||
      loadingPersonnelStats,
    // Donn√©es pour diff√©rentes p√©riodes
    data: {
      day: { recettes: dayRecettes, total: dayTotal },
      month: { recettes: monthRecettes, total: monthTotal },
      year: { recettes: yearRecettes, total: yearTotal },
      personnel: personnelStats,
    },
    // Contr√¥les pour changer la p√©riode
    periodType,
    setPeriodType,
    // Utilitaires
    refreshAll: () => {
      // Forcer le rafra√Æchissement en reg√©n√©rant les param√®tres
      setPeriodParams(generatePeriodParams(periodType));
    },
  };
};

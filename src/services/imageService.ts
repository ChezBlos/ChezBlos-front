/**
 * Service centralis√© pour la gestion des images
 * G√®re les avatars, images de menu avec support Cloudinary + fallback local
 */

// Configuration des URL d'images
const API_BASE_URL =
  import.meta.env.VITE_API_URL || "http://localhost:3000/api";
const IMAGE_BASE_URL =
  import.meta.env.VITE_IMAGE_BASE_URL || "http://localhost:3000";

// Configuration Cloudinary
const CLOUDINARY_CONFIG = {
  cloud_name: "dd0dab4zq",
  base_url: "https://res.cloudinary.com/dd0dab4zq/image/upload",
  auto_format: "f_auto,q_auto", // Format et qualit√© automatiques
};

// Configuration des logs
const LOG_LEVEL = import.meta.env.VITE_LOG_LEVEL || "debug";
const ENABLE_LOGS =
  LOG_LEVEL !== "error" &&
  (import.meta.env.DEV || import.meta.env.VITE_DEBUG_IMAGES === "true");

/**
 * Fonction de logging conditionnel pour les images
 */
function logImage(message: string, ...args: any[]) {
  if (ENABLE_LOGS) {
    console.log(`üñºÔ∏è [IMAGE-SERVICE] ${message}`, ...args);
  }
}

// Images par d√©faut
const DEFAULT_IMAGES = {
  // Avatar par d√©faut - on g√©n√®re les initiales
  avatar: null, // Sera g√©r√© par generateInitialsAvatar
  // Image de plat par d√©faut
  menuItem: "/img/plat_petit.png",
  // Logo de l'app
  logo: "/img/logo.png",
  // Placeholder g√©n√©rique
  placeholder: "/img/placeholder.png",
} as const;

/**
 * Interface pour les informations d'avatar avec initiales
 */
interface InitialsAvatar {
  initials: string;
  backgroundColor: string;
  textColor: string;
}

/**
 * G√©n√®re un avatar avec initiales bas√© sur le nom et pr√©nom
 */
export function generateInitialsAvatar(
  nom?: string | null,
  prenom?: string | null
): InitialsAvatar {
  // Protection ultra-robuste pour les param√®tres d'entr√©e
  const nomSafe = nom ? String(nom).trim() : "";
  const prenomSafe = prenom ? String(prenom).trim() : "";

  // Extraire les initiales avec protection
  const firstInitial = prenomSafe.charAt(0)?.toUpperCase() || "";
  const lastInitial = nomSafe.charAt(0)?.toUpperCase() || "";
  const initials = `${firstInitial}${lastInitial}` || "??";

  // Utiliser un background gris uniforme pour tous les avatars
  return {
    initials,
    backgroundColor: "bg-gray-500",
    textColor: "text-white",
  };
}

/**
 * Obtient l'URL d'un avatar utilisateur avec support Cloudinary et fallback vers les initiales
 */
export function getUserAvatarUrl(
  photoPath?: string | null,
  nom?: string | null,
  prenom?: string | null,
  size: number = 100
): { type: "image" | "initials"; url?: string; initials?: InitialsAvatar } {
  logImage(
    `Demande URL avatar - Path: ${photoPath}, User: ${prenom} ${nom}, Size: ${size}px`
  );

  // Si on a une photo, essayer de la charger
  if (photoPath) {
    let imageUrl: string;

    // Si c'est une URL Cloudinary, l'optimiser
    if (isCloudinaryUrl(photoPath)) {
      logImage("üå©Ô∏è Avatar Cloudinary d√©tect√©:", photoPath);

      const publicIdMatch = photoPath.match(
        /\/image\/upload\/(?:v\d+\/)?(.+)$/
      );
      if (publicIdMatch) {
        const publicId = publicIdMatch[1];
        const transformations = `w_${size},h_${size},c_fill,g_face,${CLOUDINARY_CONFIG.auto_format}`;
        imageUrl = generateCloudinaryUrl(publicId, transformations);
        logImage("‚ú® URL avatar Cloudinary optimis√©e:", imageUrl);
      } else {
        imageUrl = photoPath; // Fallback √† l'URL originale
        logImage("‚ö†Ô∏è Parsing avatar Cloudinary √©chou√©, URL originale utilis√©e");
      }
    }
    // Si c'est d√©j√† une URL compl√®te
    else if (photoPath.startsWith("http")) {
      imageUrl = photoPath;
      logImage("üåê URL avatar externe utilis√©e:", imageUrl);
    }
    // Si c'est un chemin de profil
    else if (
      photoPath.includes("/uploads/profiles/") ||
      photoPath.includes("/profiles/")
    ) {
      imageUrl = `${API_BASE_URL}/auth/profile/photo/${photoPath
        .split("/")
        .pop()}`;
      logImage("üìÅ Avatar profil local construit:", imageUrl);
    }
    // Si c'est juste un nom de fichier
    else {
      imageUrl = `${API_BASE_URL}/auth/profile/photo/${photoPath}`;
      logImage("üìÅ Avatar nom fichier, URL construite:", imageUrl);
    }

    return { type: "image", url: imageUrl };
  }

  // Sinon, utiliser les initiales
  const initials = generateInitialsAvatar(nom, prenom);
  logImage("üî§ G√©n√©ration initiales avatar:", initials.initials);

  return {
    type: "initials",
    initials,
  };
}

/**
 * D√©termine si une URL est une URL Cloudinary
 */
function isCloudinaryUrl(url: string): boolean {
  return url.includes("cloudinary.com") || url.includes("res.cloudinary.com");
}

/**
 * G√©n√®re une URL Cloudinary optimis√©e avec transformations
 */
function generateCloudinaryUrl(
  publicId: string,
  transformations: string = CLOUDINARY_CONFIG.auto_format
): string {
  // Nettoyer le public_id (enlever les pr√©fixes Cloudinary s'ils existent)
  const cleanPublicId = publicId.replace(/^.*\/image\/upload\//, "");

  logImage("üèóÔ∏è G√©n√©ration URL Cloudinary base...");
  logImage("üìã Public ID nettoy√©:", cleanPublicId);
  logImage("üåê Base URL:", CLOUDINARY_CONFIG.base_url);

  const url = `${CLOUDINARY_CONFIG.base_url}/${transformations}/${cleanPublicId}`;

  logImage("‚ú® URL finale g√©n√©r√©e:", url);

  return url;
}

// Set pour tracker les images qui ont √©chou√© (√©vite les requ√™tes r√©p√©t√©es)
const failedImages = new Set<string>();

/**
 * Obtient l'URL d'une image de menu avec support Cloudinary et fallback
 * @param imagePath - Chemin vers l'image (peut √™tre null/undefined)
 * @param size - Taille demand√©e ('small', 'medium', 'large')
 * @returns URL de l'image optimis√©e ou image par d√©faut
 */
export function getMenuImageUrl(
  imagePath?: string | null,
  size: "small" | "medium" | "large" = "medium"
): string {
  logImage(`Demande URL menu - Path: ${imagePath}, Size: ${size}`);

  if (!imagePath) {
    logImage(
      "Aucun chemin fourni, retour image par d√©faut:",
      DEFAULT_IMAGES.menuItem
    );
    return DEFAULT_IMAGES.menuItem;
  }

  // Si c'est d√©j√† une URL Cloudinary compl√®te, l'optimiser
  if (isCloudinaryUrl(imagePath)) {
    logImage("üå©Ô∏è URL Cloudinary d√©tect√©e:", imagePath);

    // Extraire le public_id de l'URL Cloudinary
    const publicIdMatch = imagePath.match(/\/image\/upload\/(?:v\d+\/)?(.+)$/);
    if (publicIdMatch) {
      const publicId = publicIdMatch[1];
      logImage("üÜî Public ID extrait:", publicId);

      // Transformations selon la taille demand√©e - format carr√© pr√©serv√©
      const sizeTransforms = {
        small: "w_300,h_300,c_fit", // Format carr√©, image enti√®re visible
        medium: "w_500,h_500,c_fit", // Format carr√©, image enti√®re visible
        large: "w_700,h_700,c_fit", // Format carr√©, image enti√®re visible
      };

      const transformations = `${sizeTransforms[size]},${CLOUDINARY_CONFIG.auto_format}`;
      const optimizedUrl = generateCloudinaryUrl(publicId, transformations);
      logImage("‚ú® URL Cloudinary optimis√©e g√©n√©r√©e:", optimizedUrl);
      return optimizedUrl;
    }

    logImage("‚ö†Ô∏è Impossible de parser l'URL Cloudinary, retour URL originale");
    return imagePath;
  }

  // Si c'est d√©j√† une URL HTTP compl√®te (non-Cloudinary)
  if (imagePath.startsWith("http")) {
    logImage("üåê URL HTTP externe d√©tect√©e:", imagePath);

    // Si cette image a d√©j√† √©chou√©, retourner l'image par d√©faut
    if (failedImages.has(imagePath)) {
      logImage(
        "‚ùå Image pr√©c√©demment en √©chec, fallback:",
        DEFAULT_IMAGES.menuItem
      );
      return DEFAULT_IMAGES.menuItem;
    }
    return imagePath;
  }

  // Construire l'URL pour le stockage local
  let finalUrl: string;

  // Si c'est un chemin avec /uploads/
  if (imagePath.startsWith("/uploads/")) {
    finalUrl = `${IMAGE_BASE_URL}${imagePath}`;
    logImage("üìÅ Chemin uploads d√©tect√©, URL locale:", finalUrl);
  }
  // Sinon, construire l'URL depuis le dossier menu
  else {
    finalUrl = `${IMAGE_BASE_URL}/uploads/menu/${imagePath}`;
    logImage("üìÅ Nom fichier d√©tect√©, URL locale construite:", finalUrl);
  }

  // Si cette image a d√©j√† √©chou√©, retourner directement l'image par d√©faut
  if (failedImages.has(finalUrl)) {
    logImage(
      "‚ùå Image locale pr√©c√©demment en √©chec, fallback:",
      DEFAULT_IMAGES.menuItem
    );
    return DEFAULT_IMAGES.menuItem;
  }

  return finalUrl;
}

/**
 * Alias pour getMenuImageUrl pour une meilleure s√©mantique dans les commandes
 */
export function getOrderItemImage(imagePath?: string | null): string {
  return getMenuImageUrl(imagePath);
}

/**
 * V√©rifie si une image existe (pour la pr√©charge)
 */
export function preloadImage(src: string): Promise<boolean> {
  return new Promise((resolve) => {
    const img = new Image();
    img.onload = () => resolve(true);
    img.onerror = () => resolve(false);
    img.src = src;
  });
}

/**
 * G√®re l'erreur de chargement d'image (fallback automatique)
 */
export function handleImageError(
  event: React.SyntheticEvent<HTMLImageElement>,
  fallbackSrc: string = DEFAULT_IMAGES.menuItem
): void {
  const target = event.target as HTMLImageElement;
  const currentSrc = target.src;

  logImage("‚ùå Erreur chargement image:", currentSrc);

  // Marquer cette image comme √©chou√©e pour √©viter les requ√™tes futures
  if (!currentSrc.includes("plat_petit.png")) {
    failedImages.add(currentSrc);
    logImage("üìù Image ajout√©e √† la liste des √©checs");
  }

  // Basculer vers l'image de fallback seulement si ce n'est pas d√©j√† fait
  if (!currentSrc.includes("plat_petit.png")) {
    target.src = fallbackSrc;
    logImage("üîÑ Fallback vers:", fallbackSrc);
  } else {
    logImage("‚ö†Ô∏è Image de fallback d√©j√† utilis√©e, pas de changement");
  }
}

/**
 * Fonction utilitaire pour r√©initialiser le cache des images √©chou√©es
 * (utile pour les tests ou si des images sont re-upload√©es)
 */
export function clearFailedImagesCache(): void {
  failedImages.clear();
}

/**
 * G√©n√®re une URL Cloudinary avec transformations personnalis√©es
 * @param publicId Public ID de l'image sur Cloudinary
 * @param transformations Transformations personnalis√©es
 * @returns URL Cloudinary optimis√©e
 */
export function getCloudinaryUrl(
  publicId: string,
  transformations?: string
): string {
  if (!publicId) {
    logImage("‚ö†Ô∏è Public ID vide, retour au placeholder");
    return DEFAULT_IMAGES.placeholder;
  }

  const finalTransforms = transformations || CLOUDINARY_CONFIG.auto_format;

  logImage("üîÑ G√©n√©ration URL Cloudinary...");
  logImage("üìã Public ID:", publicId);
  logImage("üõ†Ô∏è Transformations:", finalTransforms);

  const url = generateCloudinaryUrl(publicId, finalTransforms);

  logImage("üì§ URL g√©n√©r√©e:", url);

  return url;
}

/**
 * Extrait le public_id d'une URL Cloudinary compl√®te
 * @param cloudinaryUrl URL Cloudinary compl√®te
 * @returns Public ID ou null si non trouv√©
 */
export function extractCloudinaryPublicId(
  cloudinaryUrl: string
): string | null {
  if (!isCloudinaryUrl(cloudinaryUrl)) {
    logImage("‚ö†Ô∏è URL non-Cloudinary pour extraction Public ID:", cloudinaryUrl);
    return null;
  }

  logImage("üîç Extraction Public ID depuis URL Cloudinary...");
  logImage("üì• URL source:", cloudinaryUrl);

  const match = cloudinaryUrl.match(/\/image\/upload\/(?:v\d+\/)?(.+)$/);
  const publicId = match ? match[1] : null;

  if (publicId) {
    logImage("‚úÖ Public ID extrait:", publicId);
  } else {
    logImage("‚ùå Impossible d'extraire le Public ID");
  }

  return publicId;
}

/**
 * V√©rifie si le syst√®me utilise Cloudinary (d√©tection automatique)
 * @param imageUrl URL d'exemple d'image
 * @returns true si Cloudinary est utilis√©
 */
export function isUsingCloudinary(imageUrl?: string): boolean {
  return imageUrl ? isCloudinaryUrl(imageUrl) : false;
}

/**
 * Constantes d'export pour une utilisation facile
 */
export const IMAGE_DEFAULTS = DEFAULT_IMAGES;
export const IMAGE_CONFIG = {
  API_BASE_URL,
  IMAGE_BASE_URL,
  CLOUDINARY: CLOUDINARY_CONFIG,
};

/**
 * Types utiles
 */
export type ImageType = keyof typeof DEFAULT_IMAGES;
export type AvatarInfo = ReturnType<typeof getUserAvatarUrl>;

/**
 * Exemples d'utilisation :
 *
 * // Pour une image de menu avec taille sp√©cifique et support Cloudinary
 * const imageUrl = getMenuImageUrl(menuItem.image, 'large');
 * <img src={imageUrl} alt="Plat" onError={handleImageError} />
 *
 * // Pour un avatar utilisateur avec taille personnalis√©e
 * const avatar = getUserAvatarUrl(user.photoProfil, user.nom, user.prenom, 150);
 * if (avatar.type === 'image') {
 *   <img src={avatar.url} alt="Avatar" />
 * } else {
 *   <div className={avatar.initials.backgroundColor}>
 *     {avatar.initials.initials}
 *   </div>
 * }
 *
 * // Pour g√©n√©rer une URL Cloudinary personnalis√©e
 * const customUrl = getCloudinaryUrl('chez-blos/menu/plat_123', 'w_400,h_300,c_fill,q_80');
 *
 * // Pour v√©rifier si une image utilise Cloudinary
 * const usingCloudinary = isUsingCloudinary(menuItem.image);
 *
 * // Pour g√©rer les erreurs d'images automatiquement
 * <img
 *   src={getMenuImageUrl(item.image, 'medium')}
 *   alt="Plat"
 *   onError={handleImageError}
 * />
 */
